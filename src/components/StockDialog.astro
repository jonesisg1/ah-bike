<sl-dialog label="Stock" class="dialog-deny-close dialog-width" style="--width: min-content;" data-bike-id="1">
    <form id="bike-stock-form" class="input-validation-type" hx-headers='{"Accept": "text/html"}'>
        <table class="table-auto">
            <thead>
                <th>Size</th>
                <th>Qty</th>
                <th>Offer price</th>
            </thead>
            <tbody
                id="stock-table-input"
                hx-post="/rpc/html_tr_bike_stock_input"
                hx-target="this"
                hx-trigger="stock-btn-clicked from:body"
            ><tr></tr>
            </tbody>
        </table>        
    </form>
    <sl-button id="update-stock-btn" class="submit-btn" slot="footer" type="submit" form="bike-stock-form" variant="primary" outline
        hx-post="api/proxy/update_stock"
        hx-target="#stock-table-input"
        hx-trigger="update-btn-clicked from:form"
    >
        Update
    </sl-button>
    <sl-button class="reset-btn" slot="footer" type="reset" form="bike-stock-form" variant="primary" outline>Reset</sl-button>
    <sl-button class="close-btn" slot="footer" variant="primary" outline>Close</sl-button>
  </sl-dialog>
  
  <script>
    import { setGlobal } from "../modules/globals.ts"
    import { notifyAsToast } from "../modules/toastHelper";
    import type { HTMXEvent } from "../modules/types.ts"
    import type { SlDialog, SlInput } from "@shoelace-style/shoelace";
        
    const form: HTMLFormElement = document.querySelector('.input-validation-type');
    const dialog: SlDialog = document.querySelector('.dialog-deny-close');
    const closeButton = dialog.querySelector('.close-btn[slot="footer"]');
    
    closeButton.addEventListener('click', () => {
        form.reset();  // sl-request-close not called. Bug???
        dialog.hide();
    });

    // Prevent the dialog from closing when the user clicks on the overlay
    dialog.addEventListener('sl-request-close', event => {
        if ((event as HTMXEvent).detail.source === 'overlay') {
            event.preventDefault();
        } else {
            // Need to rest form so that automatic validation is not broken if form closed in error state.
            form.reset();
        }
    });

    let preUpdateStock;
    function getStockState () {
        const data = new FormData(document.querySelector('sl-dialog>form'));
        let stockRows = {};
        for (const [key, value] of data.entries()) {
            if (value !== '') {
                const [fs, seq, col] = key.split('-');
                let rowCols = (stockRows[fs] ?? {});
                rowCols.bike_id = parseInt((dialog as SlDialog).dataset.bikeId);
                rowCols.frame_size = fs;
                rowCols.bike_stock_seq = seq;
                rowCols[col] = value;
                stockRows[fs] = rowCols;
            }
        }
        return stockRows;
    }

    function handleSubmit (event) {
        event.preventDefault();
        const newStock = getStockState();
        if (JSON.stringify(preUpdateStock) === JSON.stringify(newStock)) {
            notifyAsToast('Information', 'No stock changes to update.');
        } else {
            let dbReq = [];
            for (const row in newStock) {
                if(parseInt(newStock[row].quantity) === 0 && parseFloat(newStock[row].offer_price ?? 0) > 0 ){
                    const searchClass = `.sz${newStock[row].frame_size}-offerprice`.replace('/','');
                    (document.querySelector(searchClass) as SlInput).focus();
                    return notifyAsToast('Invalid data', 'Cannot set Offer Price when no stock.', 'warning', 'exclamation-triangle');
                } 
                // Send all rows, the database will only insert new ones.
                dbReq.push( newStock[row] );
            }
            // Save the request data.
            setGlobal('stockUpdateData', dbReq);
            form.dispatchEvent(new Event('update-btn-clicked'));
        }
    }  
    
    dialog.addEventListener("htmx:afterSwap", async function (evt: HTMXEvent) {
        // Store pre update
        preUpdateStock = getStockState();

        // We appear to have to reattach the event listner after a swap.
        form.removeEventListener('submit', handleSubmit);

        // Wait for controls to be defined before attaching form listeners
        await Promise.all([
            customElements.whenDefined('sl-dialog'),
            customElements.whenDefined('sl-button'),
            customElements.whenDefined('sl-input')
        ]).then(() => {
            // console.log('Dialog = whenDefined')
            form.addEventListener('submit', handleSubmit);
        });
    });
  </script>

  <style is:global>

    .qty { width: 4rem; }
    .price { width: 7.5rem; }
    .size { text-align: center; }
    sl-input::part(input) { padding-right: 2px; }
    sl-input.price::part(input) { padding-left: 2px; }
    sl-input::part(clear-button) { padding-right: .5rem; }

    
    table {
        border-collapse: separate;
        border-spacing: 0px;
    }
    th:first-of-type {
        border-top-left-radius: var(--sl-border-radius-medium);
    }
    th:last-of-type {
        border-top-right-radius: var(--sl-border-radius-medium);
    }
    td, tr {
        border: 1px solid #ddd;
        padding: 8px;
    }
    th {
        padding-top: 0.5rem;
        padding-bottom: 0.5rem;
        text-align: left;
        background-color: var(--sl-color-primary-600);
        color: white;
        /* text-2xl	 */
        zzfont-size: 1.5rem; /* text-2xl 24px */
        font-size: 1.125rem; /* text-lg	18px */
        line-height: 2rem; /* 32px */
        font-weight: 600;
        padding-left: 0.75rem;
        padding-right: 0.75rem;
        border: 1px solid #ddd;
     }
     tr:nth-child(even){background-color:var(--sl-color-gray-100);}
  </style>
  