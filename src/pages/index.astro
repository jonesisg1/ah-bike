---
import DualRangeSlider from "../components/DualRangeSlider.astro";
import StockDialog from "../components/StockDialog.astro"
import Layout from "../layouts/Layout.astro"
import mountainImage from "../assets/mountain.svg"
import roadImage from "../assets/road.svg"
import arrowsImage from "../assets/arrows-sort.svg"
import filterOffImage from "../assets/filter-off.svg"
import listTreeImage from "../assets/list-tree.svg"
const bikeApi = import.meta.env.PUBLIC_BIKE_API;
const anonKey = import.meta.env.PUBLIC_ANON_KEY;
---
<script>

interface HTMXEvent extends Event {
  detail: any;
}
interface HTMXEventTarget extends EventTarget {
    dataset: any;
    value: any;
}
interface Options {
    order?: string;
    priceFrom?: string;
    priceTo?: string;
    filters?: any;
    results?: number;
    bikeType?: string;
    gridTree?: string;
    search?: string;
}
interface SLElement extends Element {
    dataset?: any;
    show(): any;
}
const dialog = document.querySelector('.dialog-deny-close') as SLElement;

document.body.addEventListener(
    "htmx:afterSwap",
    function (evt: HTMXEvent) {
        // console.log(`htmx:afterSwap - elt.id = ${evt.detail.elt.id} - view ${(document.getElementById("rg-grid-tree") as HTMLInputElement ).value}`)
        if (evt.detail.elt.id === 'bike-cards') {
            const EoF = document.getElementById("EoF")
            if ( EoF ) {
                document.getElementById("next-button").classList.add('hidden');
            } else {
                document.getElementById("next-button").classList.remove('hidden');
            }
            // For signed in users assign the stock buttons their dialog trigger.            
            for (const stockBtn of document.querySelectorAll('.stock-btn')){
                stockBtn.addEventListener('click', (el) => {
                    // console.log(el.target.dataset.bikeId);
                    dialog.dataset.bikeId = (el.target as HTMXEventTarget).dataset.bikeId;
                    dialog.show()
                });
            }
        }
        if ((document.getElementById("rg-grid-tree") as HTMLInputElement ).value === 'Tree') {
            document.getElementById("next-button").classList.add('hidden');
        }
    });

document.body.addEventListener(
    "htmx:responseError",
    function (evt: HTMXEvent) {
        console.error(`htmx:responseError - elt.id = ${evt.detail.elt.id}`)
        // if (evt.detail.elt.id === 'sign-in-status') {
            window.location.assign('/signOut');
        // }
    });

document.body.addEventListener(
    "htmx:configRequest",
    function (evt: HTMXEvent) {
        
        // console.log(evt.detail.elt.id);

        if (evt.detail.elt.id === 'sign-in-status') {
            evt.detail.parameters["callback"] = `${window.location.protocol}//${window.location.host}`;
        } else {

            const triggerType = evt.detail.triggeringEvent?.type ?? 'load'
            let options: Options = {};
            let results = 12;
        
            if (triggerType === 'load') { 
                // console.log('Setup from URLSearch');
                const params = new URLSearchParams(window.location.search);
                const opts = params.get("opts");
                if (opts !== null) {
                    options = JSON.parse(opts);
                    (document.getElementById("sort") as HTMLInputElement).value = options.order;
                    (document.getElementById("fromInput") as HTMLInputElement ).value = options.priceFrom;
                    (document.getElementById("toInput") as HTMLInputElement ).value = options.priceTo;
                    (document.getElementById("rg-bike-type") as HTMLInputElement ).value = options.bikeType;
                    (document.getElementById("rg-grid-tree") as HTMLInputElement ).value = options.gridTree;
                    (document.getElementById("search") as HTMLInputElement).value = options.search ?? '';
                    results = options.results;
                    // Update fill in range slider
                    document.querySelector('body').dispatchEvent(new Event('post-filter-reset'));
                }
            } else {
                // console.log(`event trigger: ${evt.detail.elt.id}, triggerType: ${triggerType}`);
                let filters = {};
                if (triggerType === 'post-filter-reset') {
                    results = 12;
                    options = {
                        order: (document.getElementById("sort") as HTMLInputElement)?.value,
                        filters: {},
                        priceFrom: (document.getElementById("fromInput") as HTMLInputElement )?.value,
                        priceTo: (document.getElementById("toInput") as HTMLInputElement)?.value,
                        bikeType: (document.getElementById("rg-bike-type") as HTMLInputElement)?.value,
                        gridTree: (document.getElementById("rg-grid-tree") as HTMLInputElement)?.value,
                        search: (document.getElementById("search") as HTMLInputElement)?.value,
                        results: results
                    };

                } else
                {
                    // Can't use .querySelectorAll("sl-checkbox[checked]")  // see issue #1855 (won't fix :(
                    document.querySelectorAll("sl-checkbox").forEach((el:HTMLInputElement)=>{
                        if (el.checked) {
                            filters[el.attributes['data-filter-type'].nodeValue] ??= [];
                            filters[el.attributes['data-filter-type'].nodeValue].push(el.value);
                        }
                    });

                    if (evt.detail?.headers['HX-Target'] === 'bike-cards') {
                        if (triggerType === 'sl-change') {
                            results = 12;
                        } else if (evt.detail.elt.id === 'next-button') {
                            results = document.querySelectorAll("#bike-cards > * sl-card").length + 12;
                        }
                    }

                    options = {
                        order: (document.getElementById("sort") as HTMLInputElement)?.value,
                        filters: filters,
                        priceFrom: (document.getElementById("fromInput") as HTMLInputElement )?.value,
                        priceTo: (document.getElementById("toInput") as HTMLInputElement)?.value,
                        bikeType: (document.getElementById("rg-bike-type") as HTMLInputElement)?.value,
                        gridTree: (document.getElementById("rg-grid-tree") as HTMLInputElement)?.value,
                        search: (document.getElementById("search") as HTMLInputElement)?.value,
                        results: results
                    };
                    
                }

                const refresh = encodeURI(window.location.protocol + "//" + window.location.host + window.location.pathname + `?opts=${JSON.stringify(options)}`);    
                window.history.pushState({ path: refresh }, '', refresh);
            }
            // console.log(`trigger: ${triggerType}, results: ${results}`)
            console.log(`${evt.detail.elt.id} - bikeId: ${dialog.dataset.bikeId}`)
            if (evt.detail.elt.id === 'stock-table-input') {
                
                evt.detail.parameters["_bike_id"] = dialog.dataset.bikeId;
            } else {
                evt.detail.parameters["_options"] = options;
            }

            if (evt.detail?.headers['HX-Target'] === 'bike-cards') {
                evt.detail.parameters["_row_limit"] = results;
            }

            if (evt.detail.path.includes('/rpc/')) {
                const main = document.querySelector("main");
                evt.detail.path = main.dataset.bikeApi + evt.detail.path; 

                if (main.dataset.bikeApi.includes('supabase')) {
                    evt.detail.headers['Content-Profile'] = 'bikes_api';
                    evt.detail.headers['apikey'] = main.dataset.anonKey;
                    evt.detail.headers['Authorization'] = 'Bearer ' + main.dataset.anonKey;
                }
            }
        }
    },
);
const drawer = document.querySelector(".drawer-placement-start");
const openButton = document.querySelector("#open-button");
const filterBar = document.querySelector("#filter-bar");

const resetFilters = () => {
    // console.log('resetFilters');
    document.querySelector('body').dispatchEvent(new Event('pre-filter-reset'));
    document.querySelectorAll("sl-checkbox[checked]").forEach((el:HTMLInputElement)=>{
        el.checked = false;
    })
    document.querySelector('body').dispatchEvent(new Event('post-filter-reset'));
}

document.querySelector('#filter-reset').addEventListener("click", resetFilters);

document.querySelector('#rg-bike-type').addEventListener("sl-change", ()=>{
    // console.log('bike type changed');
    (document.getElementById("search") as HTMLInputElement).value = '';
    resetFilters();
    document.querySelector('body').dispatchEvent(new Event('bike-type-changed'));
});

 // @ts-ignore
openButton.addEventListener("click", () => drawer.show());

async function mqAction(mediaQuery) {
    if (mediaQuery.matches) {
        // If media query matches (bar hidden)
        drawer.append(filterBar);
        openButton.classList.remove('removed');
        for (const el of document.querySelectorAll('.page-header')){
            el.classList.add('justify-between');
            el.classList.remove('justify-center', 'gap-3');
        }
        document.querySelector('#app-title').classList.add('text-2xl');
    } else {
        document.querySelector("main").prepend(filterBar);
        filterBar.classList.add('side-bar-hidden', 'h-dvh');
        openButton.classList.add('removed');
        for (const el of document.querySelectorAll('.page-header')){
            el.classList.remove('justify-between');
            el.classList.add('justify-center', 'gap-3');
        }
        document.querySelector('#app-title').classList.remove('text-2xl');

        try {
            //  @ts-ignore
            drawer.hide();
        } catch(e) {}
    }
}
// Create a MediaQueryList object
var mqSmall = window.matchMedia("(max-width: 656px)");
// Call listener function at run time
mqAction(mqSmall);
// Attach listener function on state changes
mqSmall.addEventListener("change", function () {
    mqAction(mqSmall);
});

</script>
<Layout title="Astro HTMX Bike">
    <StockDialog></StockDialog>
    <div class="page-container" hx-headers='{"Accept": "text/html"}'>
        
        <div class="main-header page-header container flex mx-auto">
            <!-- The Filter button that becomes visible when the sidebar is moved to the drawer. -->
            <sl-icon-button name="sliders" id="open-button" style="font-size: 1.5rem;" class="ml-3 self-center"></sl-icon-button>
            <h3 id="app-title" class="self-center">
                Astro &lt;<span class="text-[#3d72d7] font-bold">/</span>&gt; Bike
            </h3>
            <!-- bikes.bike_type selector. -->
            <sl-radio-group id="rg-bike-type" value="Mountain" class="self-center mr-3">
                <sl-radio-button id="rb-mountain" value="Mountain">
                    <sl-icon slot="prefix" src={mountainImage.src} style="font-size: 1.5rem;"></sl-icon>
                    <span id="rb-mountain-text">Mountain</span>
                </sl-radio-button>
                <sl-radio-button id="rb-road" value="Road">
                    <sl-icon slot="prefix" src={roadImage.src} style="font-size: 1.5rem;"></sl-icon>
                    <span id="rb-road-text">Road</span>
                </sl-radio-button>                    
            </sl-radio-group>
        </div>
        
        <div class="search-bar page-header mx-3 flex justify-center gap-3">
            <sl-input placeholder="Model Search" id="search" type="search" size="small" class="self-center" clearable
                hx-post="/api/proxy/html_bike_cards" 
                hx-trigger="sl-clear, input changed delay:500ms, search"
                hx-indicator="#indicator"
                hx-target="#bike-cards" 
            >
                <sl-icon name="search" slot="prefix"></sl-icon>
            </sl-input>
            <!-- Switch view from grid to tree. -->
            <sl-radio-group id="rg-grid-tree" value="Grid" class="self-center" size="small" 
                hx-post="/api/proxy/html_bike_cards" 
                hx-target="#bike-cards"
                hx-trigger="sl-change"
                hx-indicator="#indicator"
            >
                <sl-radio-button id="rb-grid" value="Grid" >
                    <sl-icon slot="prefix" name="grid-3x3-gap" style="font-size: 1.25rem;"></sl-icon>
                    <span id="rb-grid-text">Grid</span>
                </sl-radio-button>
                <sl-radio-button id="rb-tree" value="Tree" >
                    <sl-icon slot="prefix" src={listTreeImage.src} style="font-size: 1.5rem;"></sl-icon>
                    <span id="rb-grid-text">Tree</span>
                </sl-radio-button>                    
            </sl-radio-group>  
        </div>
        <div class="main-content">
            <main 
                class="container flex mx-auto mx-3"
                data-bike-api={bikeApi}
                data-anon-key={anonKey}
            >
                <sl-drawer
                    label="Filters"
                    placement="start"
                    class="drawer-placement-start"
                    style="--size: 90%;"   
                >
                </sl-drawer>
                <div id="filter-bar" class="min-w-min side-bar">
                    <sl-select class="my-3"
                        id="sort"
                        value="model_name-ASC"
                        hx-post="/api/proxy/html_bike_cards"
                        hx-target="#bike-cards"
                        hx-trigger="sl-change"
                        hx-indicator="#indicator"
                    >
                        <sl-icon src={arrowsImage.src} slot="prefix" style="font-size: 1.25rem;"></sl-icon>
                        <sl-option value="book_price_from-ASC">
                            Price (Low - High)
                            <sl-icon slot="suffix" name="sort-numeric-down"></sl-icon>
                        </sl-option>
                        <sl-option value="book_price_from-DESC">
                            Price (High - Low)
                            <sl-icon slot="suffix" name="sort-numeric-up-alt"></sl-icon>
                        </sl-option>
                        <sl-option value="model_name-ASC">
                            Model name (A-Z)
                            <sl-icon slot="suffix" name="sort-alpha-down"></sl-icon>
                        </sl-option>
                        <sl-option value="model_name-DESC">
                            Model name (Z-A)
                            <sl-icon slot="suffix" name="sort-alpha-up-alt"></sl-icon>
                        </sl-option>
                    </sl-select>
                    <sl-button id="filter-reset" class="w-full" variant="primary" outline>Clear Filters
                        <sl-icon slot="prefix" src={filterOffImage.src} style="font-size: 1.2rem;"></sl-icon>
                        <!-- <sl-icon slot="suffix" name="arrow-counterclockwise" style="font-size: 1.2rem;"></sl-icon> -->
                    </sl-button>
                    <DualRangeSlider minPrice={0}, maxPrice={15000}, step={10}></DualRangeSlider>
                    <div id="bike-filters"
                        hx-post="/rpc/html_bike_filters"
                        hx-target="this"
                        hx-trigger="load, bike-type-changed from:body"
                        hx-indicator="#indicator"                 
                    >
                    </div>
                </div>
                <!--This is here so that the 'more' button is under the grid!-->
                <div id="bike-cards-wrapper">
                    <!-- <sl-spinner id="indicator" class="htmx-indicator" style="font-size: 4rem; --track-width: 4px;"></sl-spinner> -->
                    <div id="indicator" class="htmx-indicator lds-ring"><div></div><div></div><div></div><div></div></div>

                    <div id="bike-cards" class="flex flex-wrap"
                        hx-post="/api/proxy/html_bike_cards"
                        hx-target="this"
                        hx-trigger="load, post-filter-reset from:body"
                        hx-indicator="#indicator"
                    >
                    </div>                    
                    <div class="p-3 w-full">
                        <sl-button id="next-button" class="w-full" variant="primary" outline
                            hx-post="/api/proxy/html_bike_cards"
                            hx-target="#bike-cards"
                            hx-trigger="click"
                            hx-indicator="#indicator"
                        >
                            <sl-icon slot="prefix" name="download" style="font-size: 1.2rem;"></sl-icon>
                            <sl-icon slot="suffix" name="download" style="font-size: 1.2rem;"></sl-icon>			  
                            Show more bikes
                        </sl-button>
                    </div>
                </div>
            </main>
        </div>
        <div class="footer container mx-auto mx-3 flex justify-around items-center text-sm font-light">
            <p class="">Ian Jones 2024</p>
            <span id="sign-in-status"
                hx-get="api/htmlSignInStatus"
                hx-target="this"
                hx-trigger="load"
                hx-indicator="#indicator"
            ></span>
        </div>
    </div>
</Layout>

<style is:global>
    /* Lighweight CSS spinner from https://loading.io/css/ */
    .lds-ring {
        display: inline-block;
        position: absolute;
        top: calc(50% - 40px);
        left: calc(50% - 40px);
        width: 80px;
        height: 80px;
        border-color: #0284c7;
    }
    .lds-ring div {
        box-sizing: border-box;
        display: block;
        position: absolute;
        width: 64px;
        height: 64px;
        margin: 8px;
        border: 8px solid #fff;
        border-radius: 50%;
        animation: lds-ring 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;
        border-color: #0284c7 transparent transparent transparent;;
    }
    .lds-ring div:nth-child(1) { animation-delay: -0.45s; }
    .lds-ring div:nth-child(2) { animation-delay: -0.3s; }
    .lds-ring div:nth-child(3) { animation-delay: -0.15s; }
    @keyframes lds-ring {
        0% {
            transform: rotate(0deg);
        }
        100% {
            transform: rotate(360deg);
        }
    }
    /* The rest of my styling */
    .removed {
        display: none;
    }

    .bike-card-wrapper {
        flex-grow: 1;
        margin: 0.3666rem;
        flex-basis: 20rem;
    }
    @media (max-width: 656px) {
        sl-radio-button::part(label) {
            /* padding-right: 0; */
            display:none;
        }
        sl-radio-button::part(suffix) {
            padding-right: 10px;
        }
        .bike-card-wrapper {
            max-width: 100%;
            margin: 0.75rem; /* mx-3 */
        }
    }
    .page-container {  display: grid;
        grid-template-columns: 1fr;
        grid-template-rows: 4rem 3rem 1fr 3rem;
        gap: 0px 0px;
        grid-auto-flow: row;
        grid-template-areas:
            "main-header"
            "search-bar"
            "main-content"
            "footer";
        height: 100dvh; overflow: auto;
    }
    .main-header { grid-area: main-header; }
    .main-content { grid-area: main-content; height: calc(100dvh - 10rem); overflow: auto; }
                                                          /* 4 + 4 + 2*/

    :not(:defined) {
        visibility: hidden;
    }
    .side-bar {
        position: sticky;
        top: 0;
        overflow: auto;
        padding: 0 0.75rem 0.75rem 0.75rem; 
    }
    .side-bar-hidden { height: calc(100dvh - 10rem); overflow: auto; }

    sl-checkbox:not(:last-child) {
        margin-right: 0.75rem; /* mr-3  */
    }
    sl-checkbox + sl-checkbox {
        margin-top: 0.75rem; /* mt-3 */
    }
    .text-filter>sl-checkbox::part(base) {
        min-width: 6rem;
    }
    sl-checkbox::part(base) {
        min-width: 3.5rem;
        margin-left: 0.5rem;
    }
    sl-details {
        width: 18rem; /* w-72 */
    }
    sl-drawer sl-details {
        width: unset;
    }
    sl-details::part(content) {
        padding-top: 0px
    }
    .zoom {
        transition: transform .2s; /* Animation */
    }
    .zoom:hover {
         transform: scale(1.025);
    }

</style>
