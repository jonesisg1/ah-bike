---
import DualRangeSlider from "../components/DualRangeSlider.astro";
import Layout from "../layouts/Layout.astro"
const bikeApi = import.meta.env.PUBLIC_BIKE_API;
const anonKey = import.meta.env.PUBLIC_ANON_KEY;
---
<script>

interface HTMXEvent extends Event {
  detail: any;
}
interface Options {
    order?: string;
    priceFrom?: string;
    priceTo?: string;
    filters?: any;
    results?: number;
    bikeType?: string;
}
document.body.addEventListener(
    "htmx:afterSwap",
    function (evt: HTMXEvent) {
        // console.log(`htmx:afterSwap - elt.id = ${evt.detail.elt.id}`)
        if (evt.detail.elt.id === 'bike-cards') {
            const EoF = document.getElementById("EoF")
            if ( EoF ) {
                document.getElementById("next-button").classList.add('hidden');
                // setAttribute("disabled", "");
                // document.querySelectorAll("#next-button > sl-icon").forEach((e) => {
                //     e.setAttribute('name', 'sign-stop')
                // })
            } else {
                document.getElementById("next-button").classList.remove('hidden');
                // removeAttribute("disabled");
                // document.querySelectorAll("#next-button > sl-icon").forEach((e) => {
                //     e.setAttribute('name', 'download')
                // })
            }
        }
    });

document.body.addEventListener(
    "htmx:configRequest",
    function (evt: HTMXEvent) {
        
        // console.log(evt.detail.elt.id);

        const triggerType = evt.detail.triggeringEvent?.type ?? 'load'
        let options: Options = {};
        let results = 10;
      
        if (triggerType === 'load') { 
            // console.log('Setup from URLSearch');
            const params = new URLSearchParams(window.location.search);
            const opts = params.get("opts");
            if (opts !== null) {
                options = JSON.parse(opts);
                (document.getElementById("sort") as HTMLInputElement).value = options.order;
                (document.getElementById("fromInput") as HTMLInputElement ).value = options.priceFrom;
                (document.getElementById("toInput") as HTMLInputElement ).value = options.priceTo;
                (document.getElementById("rg-bike-type") as HTMLInputElement ).value = options.bikeType;
                results = options.results;
                // Update fill in range slider
                document.querySelector('body').dispatchEvent(new Event('post-filter-reset'));
            }
        } else {

            let filters = {};
            results = document.querySelectorAll("#bike-cards > * sl-card").length;
            if (triggerType === 'post-filter-reset') {
                results = 10;
                options = {
                    order: (document.getElementById("sort") as HTMLInputElement)?.value,
                    filters: {},
                    priceFrom: (document.getElementById("fromInput") as HTMLInputElement )?.value,
                    priceTo: (document.getElementById("toInput") as HTMLInputElement)?.value,
                    bikeType: (document.getElementById("rg-bike-type") as HTMLInputElement)?.value,
                    results: results
                };

            } else
             {
                // Can't use .querySelectorAll("sl-checkbox[checked]")  // see issue #1855 (won't fix :(
                document.querySelectorAll("sl-checkbox").forEach((el:HTMLInputElement)=>{
                    if (el.checked) {
                        filters[el.attributes['data-filter-type'].nodeValue] ??= [];
                        filters[el.attributes['data-filter-type'].nodeValue].push(el.value);
                    }
                });

                if (evt.detail?.headers['HX-Target'] === 'bike-cards') {
                    if (triggerType === 'sl-change') {
                        results = 10;
                    } else if (evt.detail.elt.id === 'next-button') {
                        results += 10;
                    }
                }

                options = {
                    order: (document.getElementById("sort") as HTMLInputElement)?.value,
                    filters: filters,
                    priceFrom: (document.getElementById("fromInput") as HTMLInputElement )?.value,
                    priceTo: (document.getElementById("toInput") as HTMLInputElement)?.value,
                    bikeType: (document.getElementById("rg-bike-type") as HTMLInputElement)?.value,
                    results: results
                };
                
            }

            const refresh = encodeURI(window.location.protocol + "//" + window.location.host + window.location.pathname + `?opts=${JSON.stringify(options)}`);    
            window.history.pushState({ path: refresh }, '', refresh);
        }
        // console.log(`trigger: ${triggerType}, results: ${results}`)
        evt.detail.parameters["_options"] = options;
        if (evt.detail?.headers['HX-Target'] === 'bike-cards') {
            evt.detail.parameters["_row_limit"] = results;
        }

        const main = document.querySelector("main");
        evt.detail.path = main.dataset.bikeApi + evt.detail.path;

        if (main.dataset.bikeApi.includes('supabase')) {
            evt.detail.headers['Content-Profile'] = 'bikes_api';
            evt.detail.headers['apikey'] = main.dataset.anonKey;
            evt.detail.headers['Authorization'] = 'Bearer ' + main.dataset.anonKey;
        }
    },
);
const drawer = document.querySelector(".drawer-placement-start");
const openButton = document.querySelector("#open-button");
const filterBar = document.querySelector("#filter-bar");

const resetFilters = () => {
    // console.log('resetFilters');
    document.querySelector('body').dispatchEvent(new Event('pre-filter-reset'));
    document.querySelectorAll("sl-checkbox[checked]").forEach((el:HTMLInputElement)=>{
        el.checked = false;
    })
    document.querySelector('body').dispatchEvent(new Event('post-filter-reset'));
}

document.querySelector('#filter-reset').addEventListener("click", resetFilters);

document.querySelector('#rg-bike-type').addEventListener("sl-change", ()=>{
    // console.log('bike type changed');
    resetFilters();
    document.querySelector('body').dispatchEvent(new Event('bike-type-changed'));
});

 // @ts-ignore
openButton.addEventListener("click", () => drawer.show());

async function mqAction(mediaQuery) {
    const mainHeader = document.querySelector('.main-header');
    if (mediaQuery.matches) {
        // If media query matches (bar hidden)
        drawer.append(filterBar);
        openButton.classList.remove('invisible');
        filterBar.classList.remove('h-dvh', 'side-bar-hidden');
        document.querySelector('#rb-mountain').innerHTML = 'M';
        document.querySelector('#rb-road').innerHTML = 'R';
        mainHeader.classList.add('justify-between');
        mainHeader.classList.remove('justify-center', 'gap-5');
    } else {
        document.querySelector("main").prepend(filterBar);
        filterBar.classList.add('side-bar-hidden', 'h-dvh');
        openButton.classList.add('invisible');
        document.querySelector('#rb-mountain').innerHTML = 'Mountain';
        document.querySelector('#rb-road').innerHTML = 'Road';
        mainHeader.classList.remove('justify-between');
        mainHeader.classList.add('justify-center', 'gap-6');        
        try {
            //  @ts-ignore
            drawer.hide();
        } catch(e) {}
    }
}
// Create a MediaQueryList object
var mqSmall = window.matchMedia("(max-width: 656px)");
// Call listener function at run time
mqAction(mqSmall);
// Attach listener function on state changes
mqSmall.addEventListener("change", function () {
    mqAction(mqSmall);
});
        
</script>
<Layout title="Astro HTMX Bike">
    <div class="page-container">
        <div class="main-header container flex mx-auto mx-3">
            <sl-icon-button name="sliders" id="open-button" style="font-size: 1.5rem;" class="ml-3 self-center"></sl-icon-button>
            <h3 class="self-center">Astro &lt;<span class="text-[#3d72d7] font-bold">/</span>&gt; Bike</h3>
            <sl-radio-group id="rg-bike-type" value="Mountain" class="mr-3 self-center">
                <sl-radio-button id="rb-mountain" value="Mountain">Mountain</sl-radio-button>
                <sl-radio-button id="rb-road" value="Road">Road</sl-radio-button>                    
            </sl-radio-group>
        </div>
        <div class="main-content">
            <main 
                class="container flex mx-auto mx-3"
                hx-headers='{"Accept": "text/html"}'
                data-bike-api={bikeApi}
                data-anon-key={anonKey}
            >
                <sl-drawer
                    label="Filters"
                    placement="start"
                    class="drawer-placement-start"
                    style="--size: 90%;"
                >
                    <!-- <sl-button slot="footer" variant="primary">Close</sl-button> -->
                </sl-drawer>
                <!-- <div class="fixed left-3 top-16 z-10">
                    <sl-icon-button name="sliders" id="open-button" style="font-size: 1.5rem;"></sl-icon-button>
                </div> -->
                <div id="filter-bar" class="min-w-min side-bar">
                    <sl-select
                        id="sort"
                        label="Sort by"
                        value="model_name-ASC"
                        hx-post="/rpc/html_bike_cards"
                        hx-target="#bike-cards"
                        hx-trigger="sl-change"
                    >
                        <sl-option value="book_price_from-ASC">Price: Low-High</sl-option>
                        <sl-option value="book_price_from-DESC">Price: High-Low</sl-option>
                        <sl-option value="model_name-ASC">Model name: Low-High</sl-option>
                        <sl-option value="model_name-DESC">Model name: High-Low</sl-option>
                    </sl-select>
                    <sl-button id="filter-reset" class="w-full mt-3">Clear Filters
                        <sl-icon slot="prefix" name="funnel"></sl-icon>
                        <sl-icon slot="suffix" name="arrow-counterclockwise"></sl-icon>
                    </sl-button>
                    <DualRangeSlider minPrice={0}, maxPrice={15000}, step={10}></DualRangeSlider>
                    <!-- <FilterDetails></FilterDetails> -->
                    <div id="bike-filters"
                        hx-post="/rpc/html_bike_filters"
                        hx-target="this"
                        hx-trigger="load, bike-type-changed from:body"                    
                    >
                    </div>
                </div>
                <!-- <img src="trek/1120_21_33304_A_Primary.webp" loading="lazy"> -->
                <div>
                <div id="bike-cards" class="flex flex-wrap"
                    hx-post="/rpc/html_bike_cards"
                    hx-target="this"
                    hx-trigger="load, post-filter-reset from:body"
                >
                </div>
                <div class="p-3 w-full">
                    <sl-button id="next-button" class="w-full"
                        hx-post="/rpc/html_bike_cards"
                        hx-target="#bike-cards"
                        hx-trigger="click"
                    >Next 10 bikes
                        <sl-icon slot="prefix" name="download"></sl-icon>
                        <sl-icon slot="suffix" name="download"></sl-icon>			  
                    </sl-button>
                </div>
                </div>
            </main>
        </div>
    </div>
</Layout>

<style is:global>

    .page-container {  display: grid;
        grid-template-columns: 1fr;
        grid-template-rows: 4rem;
        gap: 0px 0px;
        grid-auto-flow: row;
        grid-template-areas:
            "main-header"
            "main-content";
        height: 100dvh; overflow: auto;
    }

    .main-header { grid-area: main-header; }

    .main-content { grid-area: main-content; height: calc(100dvh - 4rem); overflow: auto; }


    :not(:defined) {
        visibility: hidden;
    }
    .side-bar {
        position: sticky;
        top: 0;
        overflow: auto;
        padding: 0 0.75rem 0.75rem 0.75rem; 
    }

    .side-bar-hidden { height: calc(100dvh - 4rem); overflow: auto; }

    sl-checkbox:not(:last-child) {
        margin-right: 0.75rem; /* mr-3  */
    }
    sl-checkbox + sl-checkbox {
        margin-top: 0.75rem; /* mt-3 */
    }
    .text-filter>sl-checkbox::part(base) {
        min-width: 6rem;
    }
    sl-checkbox::part(base) {
        min-width: 3.5rem;
        margin-left: 0.5rem;
    }
    sl-details {
        width: 18rem; /* w-72 */
    }
    sl-drawer sl-details {
        width: unset;
    }
    sl-details::part(content) {
        padding-top: 0px
    }
    .zoom {
        transition: transform .2s; /* Animation */
    }
    .zoom:hover {
         transform: scale(1.025);
    }

</style>
