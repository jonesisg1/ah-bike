---
import DualRangeSlider from "../components/DualRangeSlider.astro";
import FilterDetails from "../components/Filter-Details.astro";
import Layout from "../layouts/Layout.astro"
---
<script>
// const checkbox = document.querySelector('sl-checkbox');
// checkbox.addEventListener('sl-change', event => {
//     console.log(event.target.checked ? 'checked' : 'not checked');
// });
document.body.addEventListener(
    "htmx:configRequest",
    function (evt) {
        
        let options = {};

        // @ts-ignore
        if (evt.detail.elt.attributes['hx-trigger'].value === 'load') { 
            const params = new URLSearchParams(window.location.search);
            const opts = params.get("opts");
            if (opts !== null) {
                options = JSON.parse(opts);
                // @ts-ignore
                (document.getElementById("sort") as HTMLInputElement).value = options.order;
                // @ts-ignore
                (document.getElementById("fromInput") as HTMLInputElement ).value = options.priceFrom;
                // @ts-ignore
                (document.getElementById("toInput") as HTMLInputElement ).value = options.priceTo;
            }
        } else {

            let filters = {};
            document.querySelectorAll("sl-checkbox[checked]").forEach((el:HTMLInputElement)=>{
                // bodge for issue #1855
                // @ts-ignore
                if (el.id !== evt.detail.elt.id ) {
                    filters[el.attributes['data-filter-type'].nodeValue] ??= [];
                    filters[el.attributes['data-filter-type'].nodeValue].push(el.value);
                }
            })
            // @ts-ignore -- bodge for issue #1855
            if (evt.detail.elt.tagName === 'SL-CHECKBOX' && evt.detail.elt.attributes['checked'] === undefined) {
                // console.log(evt.detail.elt.tagName)
                // @ts-ignore
                filters[evt.detail.elt.attributes['data-filter-type'].nodeValue] ??= [];
                // @ts-ignore
                filters[evt.detail.elt.attributes['data-filter-type'].nodeValue].push(evt.detail.elt.value);
            }

            options = {
                order: (document.getElementById("sort") as HTMLInputElement)?.value,
                filters: filters,
                priceFrom: (document.getElementById("fromInput") as HTMLInputElement )?.value,
                priceTo: (document.getElementById("toInput") as HTMLInputElement)?.value
            };

            const refresh = encodeURI(window.location.protocol + "//" + window.location.host + window.location.pathname + `?opts=${JSON.stringify(options)}`);    
            window.history.pushState({ path: refresh }, '', refresh);
        }
        // @ts-ignore
        options.host = 'http://localhost:3001';
        // @ts-ignore
        evt.detail.parameters["_options"] = options; 
    },
);
const drawer = document.querySelector(".drawer-placement-start");
const openButton = document.querySelector("#open-button");
const filterBar = document.querySelector("#filter-bar");

 // @ts-ignore
openButton.addEventListener("click", () => drawer.show());

function mqAction(mediaQuery) {
    if (mediaQuery.matches) {
        // If media query matches
        drawer.append(filterBar);
        openButton.classList.remove('invisible');
        filterBar.classList.remove('h-dvh')
    } else {
        document
            .querySelector("main")
            .prepend(filterBar);
        filterBar.classList.add('h-dvh')
        openButton.className = "invisible";
         // @ts-ignore
        drawer.hide();
    }
}
// Create a MediaQueryList object
var mqSmall = window.matchMedia("(max-width: 600px)");
// Call listener function at run time
mqAction(mqSmall);
// Attach listener function on state changes
mqSmall.addEventListener("change", function () {
    mqAction(mqSmall);
});
        
</script>
<Layout title="Astro HTMX Bike">
    <main 
        class="container flex mx-auto m-3"
        hx-headers='{"Accept": "text/html"}'
    >
        <sl-drawer
            label="Filters"
            placement="start"
            class="drawer-placement-start"
            style="--size: 90%;"
        >
            <!-- <sl-button slot="footer" variant="primary">Close</sl-button> -->
        </sl-drawer>
        <div class="fixed left-3 top-3">
            <sl-icon-button name="sliders" id="open-button" style="font-size: 2rem;"></sl-icon-button>
        </div>
        <div id="filter-bar" class="min-w-min h-dvh side-bar">
            <sl-select
                id="sort"
                label="Sort by"
                value="model_name-ASC"
                hx-post="http://localhost:3001/rpc/html_bike_cards"
                hx-target="#bike-cards"
                hx-trigger="sl-change"
            >
                <sl-option value="book_price_from-ASC">Price: Low-High</sl-option>
                <sl-option value="book_price_from-DESC">Price: High-Low</sl-option>
                <sl-option value="model_name-ASC">Model name: Low-High</sl-option>
                <sl-option value="model_name-DESC">Model name: High-Low</sl-option>
            </sl-select>
            <DualRangeSlider></DualRangeSlider>
            <!-- <FilterDetails></FilterDetails> -->
            <div id="bike-filters"
                hx-post="http://localhost:3001/rpc/html_bike_filters"
                hx-target="this"
                hx-trigger="load"                    
            >
            </div>
        </div>
        <!-- <img src="trek/1120_21_33304_A_Primary.webp" loading="lazy"> -->
        <div id="bike-cards" class="flex flex-wrap"
            hx-post="http://localhost:3001/rpc/html_bike_cards"
            hx-target="this"
            hx-trigger="load"
        >
        </div>
    </main>
</Layout>

<style is:global>
    :not(:defined) {
        visibility: hidden;
    }
    .side-bar {
        position: sticky;
        top: 0.75rem;
    }
    sl-checkbox:not(:last-child) {
        margin-right: 0.75rem; /* mr-3  */
    }
    sl-checkbox + sl-checkbox {
        margin-top: 0.75rem; /* mt-3 */
    }
    sl-details {
        width: 18rem; /* w-72 */
    }
    sl-drawer sl-details {
        width: unset;
    }
    sl-details::part(content) {
        padding-top: 0px
    }
    #open-button::part(base) {
        background-color:white;
        border: solid;
        border-color: lightgray;
        border-width: 2px;
        
    }
    .zoom {
        transition: transform .2s; /* Animation */
    }
    .zoom:hover {
         transform: scale(1.025);
    }

</style>
